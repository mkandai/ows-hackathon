from custom_retriever import CustomRetriever
from langchain.memory import ConversationBufferWindowMemory
from langchain.chains import RetrievalQA
from dotenv import load_dotenv
from langchain.chat_models import ChatOpenAI


def init_qa_chain(model='gpt-4', max_tokens=256, n_conversations_memory=5,
                  index='demo-graz', lang='en', limit=100):
    """
    # Initializes a QA chain using the specified parameters
    :param model: str, name of the model
    :param max_tokens: max tokens to be generated by the model
    :param n_conversations_memory: num previous conversations to keep in memory
    :param index: search engine setting
    :param lang: search engine setting
    :param limit: search engine setting
    :return: langchain chain obj
    """
    # Load env variables (OPENAI API KEY)
    load_dotenv('app.env')

    # Initialise model, memory, doc retriever
    llm = ChatOpenAI(model_name=model, max_tokens=max_tokens)
    memory = ConversationBufferWindowMemory(memory_key="chat_history", input_key='query',
                                            output_key='result', return_messages=True,
                                            k=n_conversations_memory)
    retriever = CustomRetriever(limit=limit, lang=lang, index=index)

    # Initialise chain
    qa_chain = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=retriever,
        return_source_documents=True,
        memory=memory
    )

    return qa_chain


def get_answer_with_sources(chain, query):
    """
    Takes a QA chain and a query as input. It uses the QA chain to get an answer to the query
    and returns a dictionary with the answer and a list of sources
    :param chain: langchain chain obj
    :param query: user query, str
    :return: dict containing model's response ('answer') and links ('sources')
    """
    result = chain(query)
    return {'answer': result['result'],
            'sources': [doc.metadata['source'] for doc in result['source_documents']]}


def clear_chain_memory(chain):
    """
    Clears the memory buffer of a QA chain.
    :param chain: langchain chain obj
    :return: langchain chain obj
    """
    chain.memory.buffer.clear()
    return chain